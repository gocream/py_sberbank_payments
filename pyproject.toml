[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "py_sberbank_payments"
description = "Python wrapper for Sberbank Payments API."
readme = "README.md"
requires-python = ">=3.10"
license = "LGPL-3.0"
authors = [
	{ name = "Dmitry Dobrynin", email = "dd@tovarisch.engineer" },
	{ name = "Alexander Kaidalov", email = "ak@gocream.ru" },
]
keywords = ["sberbank", "api", "payment"]
classifiers = [
	"Development Status :: 4 - Beta",
	"Environment :: Web Environment",
	"Intended Audience :: Developers",
	"License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
	"Natural Language :: Russian",
	"Operating System :: OS Independent",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: Implementation :: CPython",
	"Programming Language :: Python :: Implementation :: PyPy",
	"Topic :: Internet :: WWW/HTTP",
	"Topic :: Software Development :: Libraries",
	"Topic :: Utilities",
]
dependencies = [
	"requests>=2,<3",
]
dynamic = ["version"]

[project.urls]
# "Documentation" = "https://gocream.github.io/dd_yandex_pay"
"Repository" = "https://github.com/gocream/py_sberbank_payments"
# "Changelog" = "https://gocream.github.io/dd_yandex_pay/changelog/"
"Bug Tracker" = "https://github.com/gocream/py_sberbank_payments/issues"

[tool.hatch.version]
path = "py_sberbank_payments/__init__.py"

[tool.hatch.build]
include = [
	"py_sberbank_payments",
	"AUTHORS",
]
exclude = [
	# "/docs",
	".gitignore",
	"CHANGELOG.md",
	"CONTRIBUTING.md",
	"tests",
]

[tool.hatch.envs.default]
description = "Dev environment"
python = "3.12"
dependencies = [
	"pre-commit==3.5.0",
	"ipython==8.17.1",
	"requests>=2,<3",
]
[tool.hatch.envs.default.env-vars]
PYTHONPATH  = "."
[tool.hatch.envs.default.scripts]
precommit_install = "pre-commit install {args}"
precommit_uninstall = "pre-commit uninstall {args}"
init = [
	"git config --local gitflow.branch.master \"main\"",
	"git config --local gitflow.branch.develop \"dev\"",
	"git config --local gitflow.prefix.feature \"feature/\"",
	"git config --local gitflow.prefix.bugfix \"bugfix/\"",
	"git config --local gitflow.prefix.release \"release/\"",
	"git config --local gitflow.prefix.hotfix \"hotfix/\"",
	"git config --local gitflow.prefix.support \"support/\"",
	"git config --local gitflow.prefix.versiontag \"v\"",
	"git config --local gitflow.path.hooks $(pwd)\"/.git/hooks\"",
	"precommit_install",
]
remove = [
	"git config --local --remove-section gitflow.branch",
	"git config --local --remove-section gitflow.prefix",
	"git config --local --remove-section gitflow.path",
	"precommit_uninstall",
]
changelog-update = [
	"git fetch origin --tags",
	"gitmoji-changelog update \"$(hatch version)\" --preset generic --group-similar-commits",
]

[tool.hatch.envs.lint]
description = "Lint environment"
detached = true
python = "3.12"
dependencies = [
	"ruff==0.1.4",
	"black==23.10.1",
]
[tool.hatch.envs.lint.scripts]
check = [
	"ruff {args:.}",
	"black --check --diff {args:.}",
]
format = [
	"ruff --fix {args:.}",
	"black {args:.}",
]
